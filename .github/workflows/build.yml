# Inspiration : https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions
name: Create and publish a Docker image

# Configures this workflow to run only on demand.
on: [ workflow_dispatch ]

env:
    # Container registry domain
    REGISTRY: ghcr.io
    # Name for the Docker image
    IMAGE_NAME: ${{ github.repository }}
    NODE_VERSION: 18.17.0

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
    build-and-push:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                php_data:
                    - {php_version: 8.2, push: true}
                    - {php_version: 8.1, push: false}
        # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
        permissions:
            packages: write
            contents: read
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v4
            # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages.
            # Once published, the packages are scoped to the account defined here.
            -   name: Log in to the Container registry
                uses: docker/login-action@v3
                with:
                    registry: ${{ env.REGISTRY }}
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied
            # to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value
            # provides the base name for the tags and labels.
            -   name: Extract metadata (tags, labels) for Docker
                id: meta
                uses: docker/metadata-action@v5
                with:
                    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                    tags: php${{ matrix.php_data.php_version }}
            # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds,
            # it pushes the image to GitHub Packages.
            # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information,
            # see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
            # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
            -   name: Build and push Docker image
                uses: docker/build-push-action@v5
                with:
                    context: .
                    push: ${{ matrix.php_data.push }}
                    tags: ${{ steps.meta.outputs.tags }}
                    labels: ${{ steps.meta.outputs.labels }}
                    build-args: |
                        NODE_VERSION=${{ env.NODE_VERSION }}
                        PHP_VERSION=${{ matrix.php_data.php_version }}