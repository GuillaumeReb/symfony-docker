# Inspiration : https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions
name: Create and publish a Docker image

on: [ pull_request, workflow_dispatch ]

env:
    REGISTRY: ghcr.io # Container registry domain
    IMAGE_NAME: ${{ github.repository }} # Name for the Docker image
    NODE_VERSION: 18.17.0

jobs:
    push:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                php_data:
                    - {php_version: 8.2, push: true}
                    - {php_version: 8.1, push: false}
        permissions: # Sets the permissions granted to the GITHUB_TOKEN for the actions in this job.
            packages: write
            contents: read
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v4
            -   name: Log in to the Container registry # Uses the docker/login-action action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
                uses: docker/login-action@v3
                with:
                    registry: ${{ env.REGISTRY }}
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            -   name: Extract metadata (tags, labels) for Docker # This step uses docker/metadata-action to extract tags and labels that will be applied to the specified image. The id "meta" allows the output of this step to be referenced in a subsequent step. The images value provides the base name for the tags and labels.
                id: meta
                uses: docker/metadata-action@v5
                with:
                    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                    tags: php${{ matrix.php_data.php_version }}
            -   name: Build and push Docker image # This step uses the docker/build-push-action action to build the image, based on your repository's Dockerfile. If the build succeeds, it pushes the image to GitHub Packages. It uses the context parameter to define the build's context as the set of files located in the specified path. For more information, see "Usage" in the README of the docker/build-push-action repository. It uses the tags and labels parameters to tag and label the image with the output from the "meta" step.
                uses: docker/build-push-action@v5
                with:
                    context: .
                    push: ${{ matrix.php_data.push }}
                    tags: ${{ steps.meta.outputs.tags }}
                    labels: ${{ steps.meta.outputs.labels }}
                    build-args: |
                        NODE_VERSION=${{ env.NODE_VERSION }}
                        PHP_VERSION=${{ matrix.php_data.php_version }}